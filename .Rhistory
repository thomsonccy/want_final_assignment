{
k1       = dt*f(time       , state         )
k2       = dt*f(time+0.5*dt, state + 0.5*k1)
k3       = dt*f(time+0.5*dt, state + 0.5*k2)
k4       = dt*f(time+    dt, state +     k3)
newstate = state + (k1 + 2*k2 + 2*k3 + k4)/6
}
#time aspects
begin_time       = -0.5  #begin time of the simulation, negative because we move dt to begin of while loop
end_time        = hupsel_time[length(hupsel_time)-1] #end time of the simulation
##start the calculation
time            = begin_time
result_state    = c(init_state)
result_time     = c(time)
current_state   = init_state
while(time < end_time)
{
dt            = 0.5
time          = time + dt
current_state = sys.fun(current_state)
result_state  = c(result_state,current_state)
result_time   = c(result_time,time)
}
# check solution for physical correctness and stability
plot(result_state,ylab="state",xlab="time",type="l") #  too large fixed dt results in negative states
# check waterbalance
nrsteps = length(result_state)-1
dVdt = diff(result_state)*res_A/dt
Qout = res_alpha*result_state
Qin = Qin_fun(result_time)
waterbalance_error = Qin[1:nrsteps] - Qout[1:nrsteps] - dVdt
print(sum(waterbalance_error))
# count number of evaluations
number_evaluations = length(result_time)
begin.time = 0     # usually this variable is set to 0
end.time   = 50    # end time of the simulation
dt         = 0.5   # delta t; time discretisation
init.state = 3     # state of the system at the beginning of the simulation
c0         = 0.25  # decay constant
time = begin.time
result.state = c(init.state)
result.time = c(time)
current.state = init.state
# system function
sys.fun = function(state)
{
newstate = state*(1-c0*dt)
return(newstate)
}
# Initial parameter values
begin.time = 0     # usually this variable is set to 0
end.time   = 50    # end time of the simulation
dt         = 0.5   # delta t; time discretisation
init.state = 3     # state of the system at the beginning of the simulation
c0         = 0.25  # decay constant
# Simulation initialisation
time = begin.time
result.state = c(init.state)
result.time = c(time)
current.state = init.state
# Simulation
while(time < end.time)
{
current.state = sys.fun(current.state)
result.state = c(result.state,current.state)
time = time + dt
result.time = c(result.time,time)
}
# Plotting
plot(result.time, result.state,type='o', xlab="time", ylab="state")
title(main='Emptying reservoir')
grid()
# system function
sys.fun = function(state)
{
newstate = state*(1-c0*dt)
return(newstate)
}
# Initial parameter values
begin.time = 0     # usually this variable is set to 0
end.time   = 50    # end time of the simulation
dt         = 0.5   # delta t; time discretisation
init.state = 3     # state of the system at the beginning of the simulation
c0         = 0.25  # decay constant
# Simulation initialisation
time = begin.time
result.state = c(init.state)
result.time = c(time)
current.state = init.state
# Simulation
while(time < end.time)
{
current.state = sys.fun(current.state)
result.state = c(result.state,current.state)
time = time + dt
result.time = c(result.time,time)
}
# Analytical solution
time.sequence = seq(begin.time,end.time, by=0.1)
analyt.state=init.state * exp(-time.sequence*c0)
# Plotting
plot(result.time, result.state,type='o', xlab="time", ylab="state")
lines(time.sequence, analyt.state, col='grey', lwd=2)
title(main='Emptying reservoir')
grid()
# system function
sys.fun = function(state)
{
newstate = state*(1-c0*dt)
return(newstate)
}
# Initial parameter values
begin.time = 0     # usually this variable is set to 0
end.time   = 50    # end time of the simulation
dt         = 1.0   # delta t; time discretisation
init.state = 3     # state of the system at the beginning of the simulation
c0         = 0.25  # decay constant
# Simulation initialisation
time = begin.time
result.state = c(init.state)
result.time = c(time)
current.state = init.state
# Simulation
while(time < end.time)
{
current.state = sys.fun(current.state)
result.state = c(result.state,current.state)
time = time + dt
result.time = c(result.time,time)
}
# Analytical solution
time.sequence = seq(begin.time,end.time, by=0.1)
analyt.state=init.state * exp(-time.sequence*c0)
# Plotting
plot(result.time, result.state,type='o', xlab="time", ylab="state")
lines(time.sequence, analyt.state, col='grey', lwd=2)
title(main='Emptying reservoir')
grid()
# Number of function evaluations
num_eval = length(result.time)
num_eval
result.time
# system function
sys.fun = function(state)
{
newstate = state + dt/A*(-alpha*state)
return(newstate)
}
# Initial parameter values
begin.time = 0     # usually this variable is set to 0
end.time   = 50    # end time of the simulation
dt         = 1.0   # delta t; time discretisation
init.state = 3     # state of the system at the beginning of the simulation
# reservoir parameter values
res.area   = 4.0   # area
res.alpha  = 0.25  # decay constant
# Simulation initialisation
time = begin.time
result.state = c(init.state)
result.time = c(time)
current.state = init.state
# Simulation
while(time < end.time)
{
current.state = sys.fun(current.state)
result.state = c(result.state,current.state)
time = time + dt
result.time = c(result.time,time)
}
# system function
sys.fun = function(state)
{
newstate = state + dt/A*(-alpha*state)
return(newstate)
}
# Initial parameter values
begin.time = 0     # usually this variable is set to 0
end.time   = 50    # end time of the simulation
dt         = 1.0   # delta t; time discretisation
init.state = 3     # state of the system at the beginning of the simulation
# reservoir parameter values
A         = 4.0   # area
alpha     = 0.25  # decay constant
# Simulation initialisation
time = begin.time
result.state = c(init.state)
result.time = c(time)
current.state = init.state
# Simulation
while(time < end.time)
{
current.state = sys.fun(current.state)
result.state = c(result.state,current.state)
time = time + dt
result.time = c(result.time,time)
}
# Analytical solution
time.sequence = seq(begin.time,end.time, by=0.1)
analyt.state=init.state * exp(-time.sequence*res.alpha)
# Plotting
plot(result.time, result.state,type='o', xlab="time", ylab="state")
lines(time.sequence, analyt.state, col='grey', lwd=2)
title(main='Emptying reservoir')
grid()
# Number of function evaluations
num_eval = length(result.time)
# system function
sys.fun = function(state)
{
newstate = state + dt/A*(-alpha*state)
return(newstate)
}
# Initial parameter values
begin.time = 0     # usually this variable is set to 0
end.time   = 50    # end time of the simulation
dt         = 1.0   # delta t; time discretisation
init.state = 3     # state of the system at the beginning of the simulation
# reservoir parameter values
A         = 4.0   # area
alpha     = 0.25  # decay constant
# Simulation initialisation
time = begin.time
result.state = c(init.state)
result.time = c(time)
current.state = init.state
# Simulation
while(time < end.time)
{
current.state = sys.fun(current.state)
result.state = c(result.state,current.state)
time = time + dt
result.time = c(result.time,time)
}
# Analytical solution
time.sequence = seq(begin.time,end.time, by=0.1)
analyt.state=init.state * exp(-time.sequence*res.alpha/A)
# Plotting
plot(result.time, result.state,type='o', xlab="time", ylab="state")
lines(time.sequence, analyt.state, col='grey', lwd=2)
title(main='Emptying reservoir')
grid()
# Number of function evaluations
num_eval = length(result.time)
# system function
sys.fun = function(state)
{
newstate = state + dt/A*(-alpha*state)
return(newstate)
}
# Initial parameter values
begin.time = 0     # usually this variable is set to 0
end.time   = 50    # end time of the simulation
dt         = 1.0   # delta t; time discretisation
init.state = 3     # state of the system at the beginning of the simulation
# reservoir parameter values
A         = 4.0   # area
alpha     = 1.5  # decay constant
# Simulation initialisation
time = begin.time
result.state = c(init.state)
result.time = c(time)
current.state = init.state
# Simulation
while(time < end.time)
{
current.state = sys.fun(current.state)
result.state = c(result.state,current.state)
time = time + dt
result.time = c(result.time,time)
}
# Analytical solution
time.sequence = seq(begin.time,end.time, by=0.1)
analyt.state=init.state * exp(-time.sequence*res.alpha/A)
# Plotting
plot(result.time, result.state,type='o', xlab="time", ylab="state")
lines(time.sequence, analyt.state, col='grey', lwd=2)
title(main='Emptying reservoir')
grid()
# Number of function evaluations
num_eval = length(result.time)
# system function
sys.fun = function(state)
{
newstate = state + dt/A*(-alpha*state)
return(newstate)
}
# Initial parameter values
begin.time = 0     # usually this variable is set to 0
end.time   = 50    # end time of the simulation
dt         = 1.0   # delta t; time discretisation
init.state = 3     # state of the system at the beginning of the simulation
# reservoir parameter values
A         = 4.0   # area
alpha     = 1.5  # decay constant
# Simulation initialisation
time = begin.time
result.state = c(init.state)
result.time = c(time)
current.state = init.state
# Simulation
while(time < end.time)
{
current.state = sys.fun(current.state)
result.state = c(result.state,current.state)
time = time + dt
result.time = c(result.time,time)
}
# Analytical solution
time.sequence = seq(begin.time,end.time, by=0.1)
analyt.state=init.state * exp(-time.sequence*(res.alpha/A))
# Plotting
plot(result.time, result.state,type='o', xlab="time", ylab="state")
lines(time.sequence, analyt.state, col='grey', lwd=2)
title(main='Emptying reservoir')
grid()
# Number of function evaluations
num_eval = length(result.time)
# system function
sys.fun = function(state)
{
newstate = state + dt/A*(-alpha*state)
return(newstate)
}
# Initial parameter values
begin.time = 0     # usually this variable is set to 0
end.time   = 50    # end time of the simulation
dt         = 1.0   # delta t; time discretisation
init.state = 3     # state of the system at the beginning of the simulation
# reservoir parameter values
A         = 4.0   # area
alpha     = 1.5  # decay constant
# Simulation initialisation
time = begin.time
result.state = c(init.state)
result.time = c(time)
current.state = init.state
# Simulation
while(time < end.time)
{
current.state = sys.fun(current.state)
result.state = c(result.state,current.state)
time = time + dt
result.time = c(result.time,time)
}
# Analytical solution
time.sequence = seq(begin.time,end.time, by=0.1)
analyt.state=init.state * exp(-time.sequence*alpha/A)
# Plotting
plot(result.time, result.state,type='o', xlab="time", ylab="state")
lines(time.sequence, analyt.state, col='grey', lwd=2)
title(main='Emptying reservoir')
grid()
# Number of function evaluations
num_eval = length(result.time)
# system function
sys.fun = function(state)
{
newstate = state + dt/A*(-alpha*state)
return(newstate)
}
# Initial parameter values
begin.time = 0     # usually this variable is set to 0
end.time   = 50    # end time of the simulation
dt         = 0.01   # delta t; time discretisation
init.state = 3     # state of the system at the beginning of the simulation
# reservoir parameter values
A         = 4.0   # area
alpha     = 1.5  # decay constant
# Simulation initialisation
time = begin.time
result.state = c(init.state)
result.time = c(time)
current.state = init.state
# Simulation
while(time < end.time)
{
current.state = sys.fun(current.state)
result.state = c(result.state,current.state)
time = time + dt
result.time = c(result.time,time)
}
# Analytical solution
time.sequence = seq(begin.time,end.time, by=0.1)
analyt.state=init.state * exp(-time.sequence*alpha/A)
# Plotting
plot(result.time, result.state,type='o', xlab="time", ylab="state")
lines(time.sequence, analyt.state, col='grey', lwd=2)
title(main='Emptying reservoir')
grid()
# Number of function evaluations
num_eval = length(result.time)
# system function
sys.fun = function(state)
{
newstate = state + dt/A*(-alpha*state)
return(newstate)
}
# Initial parameter values
begin.time = 0     # usually this variable is set to 0
end.time   = 50    # end time of the simulation
dt         = 2.5   # delta t; time discretisation
init.state = 3     # state of the system at the beginning of the simulation
# reservoir parameter values
A         = 4.0   # area
alpha     = 1.5  # decay constant
# Simulation initialisation
time = begin.time
result.state = c(init.state)
result.time = c(time)
current.state = init.state
# Simulation
while(time < end.time)
{
current.state = sys.fun(current.state)
result.state = c(result.state,current.state)
time = time + dt
result.time = c(result.time,time)
}
# Analytical solution
time.sequence = seq(begin.time,end.time, by=0.1)
analyt.state=init.state * exp(-time.sequence*alpha/A)
# Plotting
plot(result.time, result.state,type='o', xlab="time", ylab="state")
lines(time.sequence, analyt.state, col='grey', lwd=2)
title(main='Emptying reservoir')
grid()
# Number of function evaluations
num_eval = length(result.time)
# system function
sys.fun = function(state)
{
newstate = state + dt/A*(-alpha*state)
return(newstate)
}
# Initial parameter values
begin.time = 0     # usually this variable is set to 0
end.time   = 50    # end time of the simulation
dt         = 2.5   # delta t; time discretisation
init.state = 3     # state of the system at the beginning of the simulation
# reservoir parameter values
A         = 4.0   # area
alpha     = 1.5  # decay constant
# Simulation initialisation
time = begin.time
result.state = c(init.state)
result.time = c(time)
current.state = init.state
# Simulation
while(time < end.time)
{
current.state = sys.fun(current.state)
result.state = c(result.state,current.state)
time = time + dt
result.time = c(result.time,time)
}
# Analytical solution
time.sequence = seq(begin.time,end.time, by=0.1)
analyt.state=init.state * exp(-time.sequence*alpha/A)
# Plotting
plot(result.time, result.state,type='o', xlab="time", ylab="state")
lines(time.sequence, analyt.state, col='grey', lwd=2)
title(main='Emptying reservoir')
grid()
# Number of function evaluations
num_eval = length(result.time)
#fluxfuntion
outflow = function(time,state)
{
outflow=(1/A)*(-alpha*state)
return(outflow)
}
#Heun scheme
heun_scheme = function(state)
{
substep =  state+dt*outflow(time,state)
newstate = state+0.5*dt*(outflow(time,state)+outflow(time+dt,substep))
return(newstate)
}
# Initial parameter values
begin.time = 0     # usually this variable is set to 0
end.time   = 50    # end time of the simulation
dt         = 2.5   # delta t; time discretisation
init.state = 3     # state of the system at the beginning of the simulation
# reservoir parameter values
A         = 4.0   # area
alpha     = 1.5  # decay constant
# Simulation initialisation
time = begin.time
result.state = c(init.state)
result.time = c(time)
current.state = init.state
# Simulation
while(time < end.time)
{
current.state = heun_scheme(current.state)
result.state = c(result.state,current.state)
time = time + dt
result.time = c(result.time,time)
}
# Analytical solution
time.sequence = seq(begin.time,end.time, by=0.1)
analyt.state=init.state * exp(-time.sequence*alpha/A)
# Plotting
plot(result.time, result.state,type='o', xlab="time", ylab="state")
lines(time.sequence, analyt.state, col='grey', lwd=2)
title(main='Emptying reservoir')
grid()
# Number of function evaluations
num_eval = length(result.time)
renv::activate()
install.packages("renv")
library(renv)
